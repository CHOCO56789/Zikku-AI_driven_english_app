// app/api/v1/articles/route.ts

import { supabase } from '@/libs/supabase'
import { NextResponse } from 'next/server'
import { ArticlePreview } from '@/types/articles'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    console.log('Received request body:', body) // デバッグ用

    const { data, error } = await supabase
      .from('articles')
      .insert([
        {
          base_title: body.base_title,
          target_title: body.target_title,
          status: body.status || 'draft',
          category: body.category,
          base_language: body.base_language,
          target_language: body.target_language,
          base_text: body.base_text,
          target_text: body.target_text,
          is_ai_generated: body.is_ai_generated || false,
          source_url: { references: body.source_url.references },
          metadata: {  // メタデータを明示的に設定
            tags: body.metadata.tags,
            images: body.metadata.images
          }
        }
      ])
      .select()

    if (error) {
      console.error('Supabase error:', error)
      return NextResponse.json({ error: error.message }, { status: 400 })
    }

    return NextResponse.json({ data }, { status: 201 })
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}


// APIレスポンスをArticlePreview型に変換する関数
function transformToArticlePreview(rawData: any): ArticlePreview {
  return {
    id: rawData.article_id,
    title: rawData.base_title,
    description: rawData.base_text?.substring(0, 100) + "...",
    imageUrl: rawData.metadata?.images[0]?.url || "/images/image.png",
    author: rawData.metadata?.authors?.[0] || "generated by Pattto",
    createdAt: rawData.created_at
  };
}
// ArticlePreviewの取得
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '10');
    const offset = parseInt(searchParams.get('offset') || '0');

    const { data, error } = await supabase
      .from('articles')
      .select(`
        article_id, 
        base_title, 
        base_text, 
        created_at, 
        metadata
      `)
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1)

    if (error) {
      console.error('Supabase error:', error)
      return NextResponse.json({ error: error.message }, { status: 400 })
    }

    const articlePreviews = data.map(transformToArticlePreview)
    return NextResponse.json({ data: articlePreviews }, { status: 200 })
    
  } catch (error) {
    console.error('Server error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}